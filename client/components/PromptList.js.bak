import { useTheme, getThemeStyles } from '../utils/themeUtils';
import { useState } from 'react';

export default function PromptList({ prompts }) {
  const { theme } = useTheme();
  const currentTheme = getThemeStyles(theme);
  const [expandedPrompt, setExpandedPrompt] = useState(null);
  
  // Toggle expanded state of a prompt
  const togglePrompt = (index) => {
    setExpandedPrompt(expandedPrompt === index ? null : index);
  };
  if (!prompts.length) return null;
  
  return (
    <section 
      aria-labelledby="history-heading"
      className="fadeIn"
      style={{
        marginTop: '40px',
        width: '100%'
      }}
    >
      <h2 
        id="history-heading"
        style={{
          fontSize: 'clamp(18px, 4vw, 24px)',
          marginBottom: '25px',
          color: currentTheme.text,
          borderBottom: `2px solid ${currentTheme.border}`,
          paddingBottom: '12px',
          display: 'flex',
          alignItems: 'center',
          gap: '10px'
        }}
      >
        <span role="img" aria-hidden="true" style={{ fontSize: '0.9em' }}>üìö</span>
        Generated Prompts History
      </h2>
      
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '20px'
      }}>
        {prompts.map((p, idx) => (
          <div 
            key={idx} 
            className={idx === 0 ? 'slideUp' : ''}
            style={{
              padding: 'clamp(16px, 3vw, 24px)',
              backgroundColor: currentTheme.cardBg,
              border: `1px solid ${currentTheme.border}`,
              borderRadius: '12px',
              fontSize: 'clamp(14px, 2.5vw, 16px)',
              lineHeight: '1.6',
              boxShadow: `0 4px 12px ${currentTheme.shadowColor}`,
              transition: 'transform 0.2s ease, box-shadow 0.2s ease',
              cursor: 'pointer',
            }}
            onClick={() => togglePrompt(idx)}
            onMouseEnter={(e) => {
              e.currentTarget.style.transform = 'translateY(-2px)';
              e.currentTarget.style.boxShadow = `0 6px 16px ${currentTheme.shadowColor}`;
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.transform = 'translateY(0)';
              e.currentTarget.style.boxShadow = `0 4px 12px ${currentTheme.shadowColor}`;
            }}
            tabIndex="0"
            role="button"
            aria-expanded={expandedPrompt === idx ? 'true' : 'false'}
            aria-controls={`prompt-details-${idx}`}
            onKeyDown={(e) => {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                togglePrompt(idx);
              }
            }}
          >
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: expandedPrompt === idx ? '15px' : '0'
            }}>
              <h3 style={{
                margin: 0,
                fontSize: 'clamp(16px, 2.8vw, 18px)',
                fontWeight: '600',
                color: currentTheme.text
              }}>
                Prompt #{prompts.length - idx}
              </h3>
              <span 
                style={{ 
                  fontSize: '20px', 
                  transition: 'transform 0.3s ease',
                  transform: expandedPrompt === idx ? 'rotate(180deg)' : 'rotate(0deg)'
                }}
                aria-hidden="true"
              >
                ‚åÑ
              </span>
            </div>
            
            <div 
              id={`prompt-details-${idx}`}
              style={{ 
                height: expandedPrompt === idx ? 'auto' : '0',
                overflow: 'hidden',
                opacity: expandedPrompt === idx ? 1 : 0,
                transition: 'opacity 0.3s ease',
                marginTop: expandedPrompt === idx ? '15px' : '0'
              }}
            >
              <div style={{ marginBottom: '15px' }}>
                <strong style={{ 
                  color: currentTheme.secondaryText,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px'
                }}>
                  <span role="img" aria-hidden="true">üìù</span>
                  Original:
                </strong>
                <div style={{ 
                  marginTop: '8px',
                  padding: '12px',
                  backgroundColor: theme === 'light' ? '#ffffff' : '#2b3035',
                  borderRadius: '8px',
                  border: `1px solid ${currentTheme.border}`,
                  wordWrap: 'break-word'
                }}>
                  {p.original}
                </div>
              </div>
              
              <div style={{ marginBottom: '15px' }}>
                <strong style={{ 
                  color: currentTheme.success,
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px'
                }}>
                  <span role="img" aria-hidden="true">‚ú®</span>
                  Optimized:
                </strong>
                <div style={{ 
                  marginTop: '8px',
                  padding: '12px',
                  backgroundColor: `${currentTheme.success}15`,
                borderRadius: '4px',
                border: '1px solid #c3e6cb',
                wordWrap: 'break-word'
              }}>
                {p.optimized}
              </div>
            </div>
            
            {p.atomized && p.atomized.length > 0 && (
              <div>
                <strong style={{ color: '#007bff' }}>Atomized Steps:</strong>
                <ul style={{
                  marginTop: '8px',
                  marginBottom: '0',
                  paddingLeft: 'clamp(16px, 3vw, 20px)',
                  backgroundColor: '#cce7ff',
                  padding: '8px clamp(16px, 3vw, 20px)',
                  borderRadius: '4px',
                  border: '1px solid #99d3ff'
                }}>
                  {p.atomized.map((a, i) => (
                    <li key={i} style={{ 
                      marginBottom: '5px',
                      wordWrap: 'break-word'
                    }}>
                      {a}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        ))}
      </div>
    </section>
  );
}
